import json
import re

# B·∫£ng quy ƒë·ªïi ƒë∆°n v·ªã ‚Üí gi·ªù
TIME_UNIT_TO_HOURS = {
    "gi√¢y": 1 / 3600,
    "ph√∫t": 1 / 60,
    "gi·ªù": 1,
    "ti·∫øng": 1,
    "ng√†y": 24,
    "tu·∫ßn": 7 * 24,
    "th√°ng": 30 * 24,
    "nƒÉm": 365 * 24
}

# H√†m chu·∫©n h√≥a m·ªôt l·ª±a ch·ªçn th·ªùi gian ‚Üí "X gi·ªù"
def normalize_time_option(option):
    option = option.strip().lower()
    match = re.match(r"([\d\.]+)\s*(gi√¢y|ph√∫t|gi·ªù|ti·∫øng|ng√†y|tu·∫ßn|th√°ng|nƒÉm)", option)
    if match:
        value = float(match.group(1))
        unit = match.group(2)
        hours = value * TIME_UNIT_TO_HOURS.get(unit, 0)
        return f"{round(hours, 3)} gi·ªù"
    return option  # n·∫øu kh√¥ng kh·ªõp ƒë·ªãnh d·∫°ng ‚Üí gi·ªØ nguy√™n

# ƒê∆∞·ªùng d·∫´n file
input_path = "/SSD/team_voice/vmnghia/workdir/VLSP/duration_training_dataset.txt"
output_path = "/SSD/team_voice/vmnghia/workdir/VLSP/duration_training_dataset_normalized.txt"

# Ghi log l·ªói v√† ti·∫øn tr√¨nh
num_total, num_success, num_fail = 0, 0, 0

# X·ª≠ l√Ω t·ª´ng d√≤ng
with open(input_path, "r", encoding="utf-8") as f_in, \
     open(output_path, "w", encoding="utf-8") as f_out:

    for i, line in enumerate(f_in):
        line = line.strip()
        if not line:
            continue

        num_total += 1
        try:
            obj = json.loads(line)
        except json.JSONDecodeError as e:
            print(f"[L·ªói JSON d√≤ng {i+1}]: {e}")
            num_fail += 1
            continue

        try:
            obj["options"] = [normalize_time_option(opt) for opt in obj.get("options", [])]
            f_out.write(json.dumps(obj, ensure_ascii=False) + "\n")
            num_success += 1
        except Exception as e:
            print(f"[L·ªói x·ª≠ l√Ω d√≤ng {i+1}]: {e}")
            num_fail += 1

print(f"‚úÖ T·ªïng d√≤ng: {num_total} | Th√†nh c√¥ng: {num_success} | L·ªói: {num_fail}")
print(f"üìÑ File output ƒë√£ ghi t·∫°i: {output_path}")
